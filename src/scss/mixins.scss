@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@import './variables.scss';
@import './functions.scss';

@mixin animate {
  transition: all .5s ease;
}

@mixin mobile {
  @media screen and (max-width: #{map-get($breakpointUpperLimit, mobile) - 1}px) {
    @content;
  }
}

@mixin desktop {
  @media print, screen and (min-width: #{map-get($breakpointUpperLimit, mobile)}px) {
    @content;
  }
}

@mixin large {
  @media screen and (min-width: #{map-get($breakpointUpperLimit, desktop)}px) {
    @content;
  }
}

@mixin xLarge {
  @media screen and (min-width: #{map-get($breakpointUpperLimit, large)}px) {
    @content;
  }
}

@mixin print {
  @media print {
    @content;
  }
}

@mixin ie11 {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}

@mixin scalable( $property, $propertyValue, $mobileOverrideValue: false, $scalingFactor: $defaultScalingValue ) {
  #{$property}: sv($propertyValue, $scalingFactor);

  @if $mobileOverrideValue == false {
    // Mobile-value defaults to the $propertyValue, unless a non-null value is given by the user.
    $mobileOverrideValue: $propertyValue;
  }

  @if $mobileOverrideValue != 'OFF' {
    // Optional: Overrides the calculation-property at mobile breakpoint. The property becomes fixed to the given $mobileOverrideValue.

    @include mobile {
      @if type-of($mobileOverrideValue) == 'string' {
        #{$property}: unquote($mobileOverrideValue);
      } @else {
        #{$property}: strip-unit($mobileOverrideValue) * 1px; // Variable may or may not have units. Normalize to pixel unit.
      }

    }
  }

  // At largeDesktop breakpoint, the property stops scaling and becomes fixed to the given $propertyValue.
  @include large {
    #{$property}: strip-unit($propertyValue) * 1px; // Variable may or may not have units. Normalize to pixel unit.
  }
}

// sP() â€“ "scalable properties"
// Example:
//    @include sp(font-size 24 28 0.7);
// Example:
//    @include sP([
//    font-size 18 32 0.7,
//    margin-bottom 10,
//    padding-bottom 20 20
//    ]);
@mixin sP( $args ) {
  @if (type-of($args) == list and type-of(nth($args, 1)) == list) {
    // Handling a set of list arguments
    @each $entry in $args {
      @if (type-of($entry) != list) {
        @error 'mixin sP() is handling a set of lists, but encountered a non-list entry. $entry: #{$entry}'
      }

      $numArgs: length($entry);
      @if $numArgs < 2 {
        @error 'mixin sP() is handling a set of lists, but encountered an entry with less than 2 values. $entry: #{$entry}'
      }
      @if $numArgs > 4 {
        @error 'mixin sP() is handling a set of lists, but encountered an entry with more than 4 values. $entry: #{$entry}'
      }

      @include scalable(
                      nth($entry, 1),
                      nth($entry, 2),
                      if($numArgs >= 3, nth($entry, 3), false),
                      if($numArgs >= 4, nth($entry, 4), $defaultScalingValue)
      );
    }
  } @else {
    // Handling a single list argument
    $numArgs: length($args);
    @if $numArgs < 2 {
      @error 'mixin sP() requires a list argument with at least 2 values. $args: #{$args}'
    }
    @if $numArgs > 4 {
      @error 'mixin sP() encountered a list argument with more than 4 values. $args: #{$args}'
    }

    @include scalable(
                    nth($args, 1),
                    nth($args, 2),
                    if($numArgs >= 3, nth($args, 3), false),
                    if($numArgs >= 4, nth($args, 4), $defaultScalingValue)
    );
  }
}

@mixin patbelStickyNavHeight {
  // Abandon all hope ye who enter here...
  // 177px
  //  -> top position of stickyNav relative to viewport (at vw=1680)
  // 54px
  //  -> spacing equivalent to space between stickyHeader and top of stickNav.
  // "calc(10.6rem + 7.1 * ((100vw - 76.8rem) / 91.2))" = A+B = 177px scaled
  //  -> A: scaled height of stickyHeader
  //    -> aka .microsite-static-navbar : scalable(min-height, 123, 123, .6)
  //  -> B: scaled top position of stickyNav
  //    -> aka @include sP([...top 123+54 0 .45,])
  // This logic probably isn't fully precise, since we have certain things scaling at different rates,
  // but it should be a close enough approximation for most sizes without being overtly broken.
  max-height: calc(100vh - (10.6rem + 7.1 * ((100vw - 76.8rem) / 91.2)) - 54px);
  @include large {
    max-height: calc(100vh - (177px + 54px));
  }
}